import { __awaiter, __generator } from "tslib";
import { SecretClient } from "../../src";
import { DefaultAzureCredential } from "@azure/identity";
function main() {
    return __awaiter(this, void 0, void 0, function () {
        var credential, vaultName, url, client, secretName, result, secret, updatedSecret;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    credential = new DefaultAzureCredential();
                    vaultName = process.env["KEYVAULT_NAME"] || "<keyvault-name>";
                    url = "https://" + vaultName + ".vault.azure.net";
                    client = new SecretClient(url, credential);
                    secretName = "MySecretName";
                    return [4 /*yield*/, client.setSecret(secretName, "MySecretValue")];
                case 1:
                    result = _a.sent();
                    console.log("result: ", result);
                    return [4 /*yield*/, client.getSecret(secretName)];
                case 2:
                    secret = _a.sent();
                    console.log("secret: ", secret);
                    return [4 /*yield*/, client.updateSecretProperties(secretName, result.properties.version, {
                            enabled: false
                        })];
                case 3:
                    updatedSecret = _a.sent();
                    console.log("updated secret: ", updatedSecret);
                    // Delete the secret
                    // If we don't want to purge the secret later, we don't need to wait until this finishes
                    return [4 /*yield*/, client.beginDeleteSecret(secretName)];
                case 4:
                    // Delete the secret
                    // If we don't want to purge the secret later, we don't need to wait until this finishes
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
main().catch(function (err) {
    console.log("error code: ", err.code);
    console.log("error message: ", err.message);
    console.log("error stack: ", err.stack);
});
//# sourceMappingURL=helloWorld.js.map